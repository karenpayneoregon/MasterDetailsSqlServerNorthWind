using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace DataOperations
{
    public class Operations
    {
        private string ConnectionString = "Data Source=.\\SQLEXPRESS;Initial Catalog=MasterDetailSimple;Integrated Security=True";
        public bool HasErrors { get; set; }
        public string ExceptionMessage { get; set; }

        /// <summary>
        /// This is the master data
        /// </summary>
        /// <value></value>
        /// <returns></returns>
        /// <remarks></remarks>
        private BindingSource _Master = new BindingSource();
        public BindingSource Master
        {
            get => _Master;
            set => _Master = value;
        }
        public Operations()
        {
            GetStateInformation();
        }
        /// <summary>
        /// This is the details to the Master 
        /// </summary>
        /// <value></value>
        /// <returns></returns>
        /// <remarks></remarks>
        private BindingSource _Details = new BindingSource();
        public BindingSource Details
        {
            get => _Details;
            set => _Details = value;
        }
        /// <summary>
        /// This will contain order details for the current order of a customer
        /// </summary>
        /// <returns></returns>
        private BindingSource _OrderDetails = new BindingSource();
        public BindingSource OrderDetails
        {
            get => _OrderDetails;
            set => _OrderDetails = value;
        }
        public List<StateItems> StateInformation { get; set; }
        /// <summary>
        /// Read state table data into a list
        /// </summary>
        /// <remarks>
        /// First row is virtual
        /// </remarks>
        private void GetStateInformation()
        {
            
            StateInformation = new List<StateItems> { new StateItems { Identifier = -1, Name = "Select one" } };
            
            using (var cn = new SqlConnection { ConnectionString = ConnectionString })
            {
                using (var cmd = new SqlCommand { Connection = cn, CommandText = "SELECT id,StateName,StateAbbrev FROM StateLookup" })
                {
                    cn.Open();

                    var reader = cmd.ExecuteReader();

                    while (reader.Read())
                    {
                        StateInformation.Add(new StateItems { Identifier = reader.GetInt32(0), Name = reader.GetString(1), Abbreviation = reader.GetString(2) });
                    }
                }
            }
        }
        /// <summary>
        /// Initial data loaded was generated by Red Gate SQL Data Generator
        /// so the invoice numbers will be different than the ones created
        /// here with the database sequence I have provided here.
        /// </summary>
        public void LoadData()
        {
            var ds = new DataSet();

            using (var cn = new SqlConnection { ConnectionString = ConnectionString })
            {
                var da = new SqlDataAdapter("SELECT id,FirstName,LastName,Address,City,State,ZipCode FROM Customer", cn);

                try
                {
                    da.Fill(ds, "Customer");

                    DataTable dt = ds.Tables["Customer"];

                    da = new SqlDataAdapter("SELECT id,CustomerId,OrderDate,Invoice FROM Orders", cn);
                    da.Fill(ds, "Orders");
                    ds.SetRelation("Customer", "Orders", "Id", "CustomerId");

                    da = new SqlDataAdapter("SELECT id,OrderId ,ProductName,UnitPrice,Quantity FROM OrderDetails", cn);
                    da.Fill(ds, "OrderDetails");
                    ds.SetRelation("Orders", "OrderDetails", "Id", "OrderId");

                    Master.DataSource = ds;
                    Master.DataMember = ds.Tables[0].TableName;

                    Details.DataSource = Master;
                    Details.DataMember = ds.Relations[0].RelationName;

                    OrderDetails.DataSource = Details;
                    OrderDetails.DataMember = ds.Relations[1].RelationName;
                }
                catch (Exception ex)
                {
                    HasErrors = true;
                    ExceptionMessage = ex.Message;
                }
            }
        }

        /// <summary>
        /// Add new order for a customer
        /// </summary>
        /// <param name="customerId">Identifies the customer for this order</param>
        /// <param name="orderDate"></param>
        /// <param name="invoice"></param>
        /// <param name="newPrimaryKeyValue">new primary key for new order row</param>
        /// <remarks>
        /// Here I'm using NewPrimaryKeyValue as success of the operations
        /// while in AddCustomer I use a function returning a bool. I simply
        /// wanted to show two variations on how one might write this code.
        /// </remarks>
        public void AddOrder(int customerId, DateTime orderDate, ref string invoice, ref int newPrimaryKeyValue)
        {
            using (var cn = new SqlConnection { ConnectionString = ConnectionString })
            {
                using (var cmd = new SqlCommand { Connection = cn })
                {
                    cmd.CommandText = "INSERT INTO Orders (CustomerId,OrderDate,Invoice) VALUES (@CustomerId,@OrderDate,@Invoice)";

                    try
                    {
                        cn.Open();

                        cmd.Parameters.AddWithValue("@CustomerId", customerId);
                        cmd.Parameters.AddWithValue("@OrderDate", DateTime.Now);
                        invoice = GenerateInvoice(cn);
                        cmd.Parameters.AddWithValue("@Invoice", invoice);

                        int result = cmd.ExecuteNonQuery();

                        if (result == 1)
                        {
                            cmd.CommandText = "Select @@Identity";
                            newPrimaryKeyValue = Convert.ToInt32(cmd.ExecuteScalar());
                        }
                    }
                    catch (Exception ex)
                    {
                        HasErrors = true;
                        ExceptionMessage = ex.Message;
                        newPrimaryKeyValue = -1;
                    }
                }
            }
        }
        /// <summary>
        /// We only permit order date changed as the invoice is a generated value that in my
        /// cases a business rule to not permit the value to change.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="orderDate"></param>
        /// <returns></returns>
        public bool UpdateOrder(int id, DateTime orderDate)
        {
            bool success = false;

            var sql = "UPDATE Orders  SET OrderDate = @OrderDate WHERE id = @Id";

            using (var cn = new SqlConnection { ConnectionString = ConnectionString })
            {
                using (var cmd = new SqlCommand { Connection = cn, CommandText = sql })
                {
                    cmd.Parameters.AddWithValue("@OrderDate", orderDate);
                    cmd.Parameters.AddWithValue("@id", id);

                    try
                    {
                        cn.Open();
                        success = cmd.ExecuteNonQuery() == 1;
                    }
                    catch (Exception ex)
                    {
                        HasErrors = true;
                        ExceptionMessage = ex.Message;
                    }
                }
            }

            return success;
        }
        /// <summary>
        /// Remove a single order
        /// </summary>
        /// <param name="orderId">Primary key to identify a valid order record</param>
        public bool RemoveSingleOrder(int orderId)
        {
            bool success = false;

            var sql = "DELETE FROM [Orders] WHERE id = @id";

            using (var cn = new SqlConnection { ConnectionString = ConnectionString })
            {
                using (var cmd = new SqlCommand { Connection = cn, CommandText = sql })
                {
                    cmd.Parameters.AddWithValue("id", orderId);

                    try
                    {
                        cn.Open();
                        success = cmd.ExecuteNonQuery() == 1;
                    }
                    catch (Exception ex)
                    {
                        HasErrors = true;
                        ExceptionMessage = ex.Message;
                    }
                }
            }

            return success;
        }
        /// <summary>
        /// Add a new customer - see also AddCustomer1 below with a slight twist to the sql statement
        /// </summary>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="address"></param>
        /// <param name="city"></param>
        /// <param name="state"></param>
        /// <param name="zipCode"></param>
        /// <param name="newPrimaryKeyValue">new primary key for newly added customer row</param>
        /// <returns></returns>
        /// <remarks>
        /// See comments in AddOrder as I did this method different than AddOrder
        /// to show variations.
        /// </remarks>
        public bool AddCustomer(string firstName, string lastName, string address, string city, string state, string zipCode, ref int newPrimaryKeyValue)
        {
            bool success = false;

            using (var cn = new SqlConnection { ConnectionString = ConnectionString })
            {
                using (var cmd = new SqlCommand { Connection = cn })
                {
                    cmd.CommandText = 
                        "INSERT INTO Customer (FirstName,LastName,[Address],City,[State],ZipCode) " + 
                        "VALUES (@FirstName,@LastName,@Address,@City,@State,@ZipCode)";
                    
                    try
                    {
                        cmd.Parameters.AddWithValue("@FirstName", firstName);
                        cmd.Parameters.AddWithValue("@LastName", lastName);
                        cmd.Parameters.AddWithValue("@Address", address);
                        cmd.Parameters.AddWithValue("@City", city);
                        cmd.Parameters.AddWithValue("@State", state);
                        cmd.Parameters.AddWithValue("@ZipCode", zipCode);
                        
                        cn.Open();

                        int result = cmd.ExecuteNonQuery();

                        if (result == 1)
                        {
                            cmd.CommandText = "Select @@Identity";
                            newPrimaryKeyValue = Convert.ToInt32(cmd.ExecuteScalar());
                            success = true;
                        }
                    }
                    catch (Exception ex)
                    {
                        HasErrors = true;
                        ExceptionMessage = ex.Message;
                        newPrimaryKeyValue = -1;
                        success = false;
                    }
                }
            }

            return success;
        }
        public bool AddCustomer1(string firstName, string lastName, string address, string city, string state, string zipCode, ref int newPrimaryKeyValue)
        {
            bool success = false;

            using (var cn = new SqlConnection { ConnectionString = ConnectionString })
            {
                using (var cmd = new SqlCommand { Connection = cn })
                {
                    cmd.CommandText =
                        "INSERT INTO Customer (FirstName,LastName,[Address],City,[State],ZipCode) " + // insert
                        "VALUES (@FirstName,@LastName,@Address,@City,@State,@ZipCode);" +             // insert
                        "SELECT CAST(scope_identity() AS int);";                                      // get new primary key

                    try
                    {
                        cmd.Parameters.AddWithValue("@FirstName", firstName);
                        cmd.Parameters.AddWithValue("@LastName", lastName);
                        cmd.Parameters.AddWithValue("@Address", address);
                        cmd.Parameters.AddWithValue("@City", city);
                        cmd.Parameters.AddWithValue("@State", state);
                        cmd.Parameters.AddWithValue("@ZipCode", zipCode);

                        cn.Open();
                        
                        newPrimaryKeyValue = Convert.ToInt32(cmd.ExecuteScalar());
                        success = true;

                    }
                    catch (Exception ex)
                    {
                        HasErrors = true;
                        ExceptionMessage = ex.Message;
                        newPrimaryKeyValue = -1;
                        success = false;
                    }
                }
            }

            return success;
        }
        /// <summary>
        /// Variation of AddCustomer1 by using Parameters.Add rather than Parameters.AddWithValue
        /// </summary>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="address"></param>
        /// <param name="city"></param>
        /// <param name="state"></param>
        /// <param name="zipCode"></param>
        /// <param name="newPrimaryKeyValue"></param>
        /// <returns></returns>
        public bool AddCustomer2(string firstName, string lastName, string address, string city, string state, string zipCode, ref int newPrimaryKeyValue)
        {
            bool success = false;

            using (var cn = new SqlConnection { ConnectionString = ConnectionString })
            {
                using (var cmd = new SqlCommand { Connection = cn })
                {
                    cmd.CommandText =
                        "INSERT INTO Customer (FirstName,LastName,[Address],City,[State],ZipCode) " + // insert
                        "VALUES (@FirstName,@LastName,@Address,@City,@State,@ZipCode);" +             // insert
                        "SELECT CAST(scope_identity() AS int);";                                      // get new primary key

                    try
                    {
                        cmd.Parameters.Add(new SqlParameter("@FirstName", SqlDbType.NVarChar)).Value = firstName;
                        cmd.Parameters.Add(new SqlParameter("@LastName", SqlDbType.NVarChar)).Value = lastName;
                        cmd.Parameters.Add(new SqlParameter("@Address", SqlDbType.NVarChar)).Value = address;
                        cmd.Parameters.Add(new SqlParameter("@City", SqlDbType.NVarChar)).Value = city;
                        cmd.Parameters.Add(new SqlParameter("@State", SqlDbType.NVarChar)).Value = state;
                        cmd.Parameters.Add(new SqlParameter("@ZipCode", SqlDbType.NVarChar)).Value = zipCode;

                        cn.Open();

                        newPrimaryKeyValue = Convert.ToInt32(cmd.ExecuteScalar());
                        success = true;

                    }
                    catch (Exception ex)
                    {
                        HasErrors = true;
                        ExceptionMessage = ex.Message;
                        newPrimaryKeyValue = -1;
                        success = false;
                    }
                }
            }

            return success;
        }
        /// <summary>
        /// Variation of AddCustomer2 by passing a customer object. Set If property of the customer directly
        /// </summary>
        /// <param name="customer"></param>
        /// <returns></returns>
        public bool AddCustomer3(Customer customer)
        {
            bool success = false;

            using (var cn = new SqlConnection { ConnectionString = ConnectionString })
            {
                using (var cmd = new SqlCommand { Connection = cn })
                {
                    cmd.CommandText =
                        "INSERT INTO Customer (FirstName,LastName,[Address],City,[State],ZipCode) " + // insert
                        "VALUES (@FirstName,@LastName,@Address,@City,@State,@ZipCode);" +             // insert
                        "SELECT CAST(scope_identity() AS int);";                                      // get new primary key

                    try
                    {
                        cmd.Parameters.Add(new SqlParameter("@FirstName", SqlDbType.NVarChar))
                            .Value = customer.FirstName;
                        
                        cmd.Parameters.Add(new SqlParameter("@LastName", SqlDbType.NVarChar))
                            .Value = customer.LastName;
                        
                        cmd.Parameters.Add(new SqlParameter("@Address", SqlDbType.NVarChar))
                            .Value = customer.Address;
                        
                        cmd.Parameters.Add(new SqlParameter("@City", SqlDbType.NVarChar))
                            .Value = customer.City;
                        
                        cmd.Parameters.Add(new SqlParameter("@State", SqlDbType.NVarChar))
                            .Value = customer.State;
                        
                        cmd.Parameters.Add(new SqlParameter("@ZipCode", SqlDbType.NVarChar))
                            .Value = customer.ZipCode;

                        cn.Open();

                        customer.Id = Convert.ToInt32(cmd.ExecuteScalar());
                        success = true;

                    }
                    catch (Exception ex)
                    {
                        HasErrors = true;
                        ExceptionMessage = ex.Message;
                        customer.Id = -1;
                        success = false;
                    }
                }
            }

            return success;
        }

        /// <summary>
        /// Remove customer (master) by primary key along with tha orders (children).
        /// To be safe a transaction is used.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool RemoveCustomerAndOrders(int id)
        {
            string sql = "DELETE FROM Orders WHERE CustomerId =  @CustomerId";
            bool success = false;

            using (var cn = new SqlConnection { ConnectionString = ConnectionString })
            {
                cn.Open();

                SqlTransaction trans = cn.BeginTransaction("DeleteOps");

                using (var cmd = new SqlCommand { Connection = cn, CommandText = sql, Transaction = trans })
                {
                    cmd.Parameters.AddWithValue("@CustomerId", id);

                    try
                    {
                        cmd.ExecuteNonQuery();
                        cmd.Parameters.Clear();
                        cmd.Parameters.AddWithValue("@Id", id);
                        cmd.CommandText = "DELETE FROM Customer WHERE  id = @id";
                        cmd.ExecuteNonQuery();
                        trans.Commit();
                        success = true;
                    }
                    catch (Exception ex)
                    {
                        HasErrors = true;
                        ExceptionMessage = ex.Message;
                        try
                        {
                            trans.Rollback();
                        }
                        catch (Exception transEx)
                        {
                            HasErrors = true;
                            ExceptionMessage = transEx.Message;
                        }
                    }
                }
            }

            return success;
        }
        /// <summary>
        /// Update a customer
        /// </summary>
        /// <param name="customerRow"></param>
        /// <returns></returns>
        public bool UpdateCustomer(DataRow customerRow)
        {
            bool success = false;

            string sql = "UPDATE Customer  SET FirstName = @FirstName,LastName = @LastName,[Address] = @Address,City = @City,[State] = @State,ZipCode = @ZipCode WHERE id = @Id";

            using (var cn = new SqlConnection { ConnectionString = ConnectionString })
            {
                using (var cmd = new SqlCommand { Connection = cn, CommandText = sql })
                {
                    cmd.Parameters.AddWithValue("@FirstName", customerRow.Field<string>("FirstName"));
                    cmd.Parameters.AddWithValue("@LastName", customerRow.Field<string>("LastName"));
                    cmd.Parameters.AddWithValue("Address", customerRow.Field<string>("Address"));
                    cmd.Parameters.AddWithValue("@City", customerRow.Field<string>("City"));
                    cmd.Parameters.AddWithValue("@State", customerRow.Field<string>("State"));
                    cmd.Parameters.AddWithValue("@ZipCode", customerRow.Field<string>("ZipCode"));
                    cmd.Parameters.AddWithValue("@id", customerRow.Field<int>("id"));

                    try
                    {
                        cn.Open();
                        success = cmd.ExecuteNonQuery() == 1;
                    }
                    catch (Exception ex)
                    {
                        HasErrors = true;
                        ExceptionMessage = ex.Message;
                    }
                }
            }

            return success;
        }

        /// <summary>
        /// Calls a database sequence in the database to get 
        /// a unique invoice number
        /// 
        /// Requires a open connection as per above.
        /// </summary>
        /// <param name="cn"></param>
        /// <returns></returns>
        public string GenerateInvoice(SqlConnection cn)
        {
            string result = "";
            string sql = "SELECT CONVERT(VARCHAR(4), GETDATE(), 12) + RIGHT('0000' + CAST( NEXT VALUE FOR dbo.GetInvoiceNumber AS VARCHAR(3)),4)";

            using (var cmd = new SqlCommand { Connection = cn, CommandText = sql })
            {
                result = cmd.ExecuteScalar().ToString();
            }

            return result;
        }
    }
}
